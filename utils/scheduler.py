import asyncio
import logging
from datetime import datetime
from utils.outages_parser import parse_outages
from databases.manager import db_manager
from aiogram import Bot
from data.config import TELEGRAM_TOKEN
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("scheduler.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Scheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
    
    async def execute_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            logger.info(f"=== –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò: {task['name']} (ID: {task['id']}) ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            task_type_objects = self._get_task_types(task)
            
            if not task_type_objects:
                logger.warning(f"–î–ª—è –∑–∞–¥–∞—á–∏ {task['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–∏–ø—ã –∑–∞–¥–∞—á")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            groups = self._get_task_groups(task)
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            outages_data = self._collect_task_outages(task_type_objects)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = self._prepare_messages(groups, outages_data)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self._send_notifications(groups, messages, outages_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
            self._update_task_last_run_time(task)
                
            logger.info(f"=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò: {task['name']} ===")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task['name']}: {e}", exc_info=True)
    
    
    def _format_outages_message(self, outages, group=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö"""
        if not outages:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö."
        
        message = "<b>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:</b>\n\n"
        
        for outage in outages:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            addresses_text = ""
            try:
                addresses = json.loads(outage.addresses) if outage.addresses else []
                if addresses:
                    if group and group.addresses:
                        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        group_addresses = json.loads(group.addresses) if group.addresses else []
                        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–≤—à–∏–π –∞–¥—Ä–µ—Å
                        matched_address = self._find_matched_address(group_addresses, addresses)
                        if matched_address:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–≤—à–∏–π –∞–¥—Ä–µ—Å
                            street = matched_address.get('street', '')
                            houses = matched_address.get('houses', [])
                            if houses:
                                addresses_text = f"{street} ({', '.join(houses)})"
                            else:
                                addresses_text = street
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–≤–ø–∞–≤—à–∏–π –∞–¥—Ä–µ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞
                            addresses_parts = []
                            for addr in addresses:
                                street = addr.get('street', '')
                                houses = addr.get('houses', [])
                                if houses:
                                    addresses_parts.append(f"{street} ({', '.join(houses)})")
                                else:
                                    addresses_parts.append(street)
                            addresses_text = "; ".join(addresses_parts)
                    else:
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞
                        addresses_parts = []
                        for addr in addresses:
                            street = addr.get('street', '')
                            houses = addr.get('houses', [])
                            if houses:
                                addresses_parts.append(f"{street} ({', '.join(houses)})")
                            else:
                                addresses_parts.append(street)
                        addresses_text = "; ".join(addresses_parts)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–¥—Ä–µ—Å–æ–≤: {e}")
                addresses_text = outage.addresses or ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            outage_text = f"<b>üè¢ –†–∞–π–æ–Ω:</b> {outage.district}\n"
            outage_text += f"<b>üí° –†–µ—Å—É—Ä—Å:</b> {outage.resource}\n"
            if outage.organization:
                outage_text += f"<b>üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {outage.organization}\n"
            if outage.phone:
                outage_text += f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {outage.phone}\n"
            if addresses_text:
                outage_text += f"<b>üìç –ê–¥—Ä–µ—Å–∞:</b> {addresses_text}\n"
            if outage.reason:
                outage_text += f"<b>üìù –ü—Ä–∏—á–∏–Ω–∞:</b> {outage.reason}\n"
            if outage.start_time and outage.end_time:
                outage_text += f"<b>‚è∞ –í—Ä–µ–º—è:</b> {outage.start_time} - {outage.end_time}\n"
            outage_text += "\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–∏–º–∏—Ç
            if len(message + outage_text) > 3500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –µ—Å—Ç—å –µ—â–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                remaining_count = len(outages) - outages.index(outage)
                if remaining_count > 0:
                    message += f"...–∏ –µ—â–µ {remaining_count} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π\n\n"
                break
            else:
                message += outage_text
        
        return message
    
    def _normalize_street_name(self, street_name):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã –æ—Ç —Ç–∏–ø–æ–≤ —É–ª–∏—Ü –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        return re.sub(
            r'\s*(—É–ª–∏—Ü–∞|—É–ª\.?|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä-—Ç|–ø–µ—Ä–µ—É–ª–æ–∫|–ø–µ—Ä\.?|–ø–ª–æ—â–∞–¥—å|–ø–ª\.?|–ø—Ä–æ–µ–∑–¥|–±—É–ª—å–≤–∞—Ä|–±-—Ä|–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è|–Ω–∞–±\.?)\s*$',
            '',
            street_name
        ).strip()
    
    def _address_match_utility(self, group_addr, outage_addr):
        """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            outage_street = outage_addr.get('street', '').lower().strip()
            outage_houses = [h.lower().strip() for h in outage_addr.get('houses', [])]
            
            group_addr_clean = group_addr.lower().strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É–ª–∏—Ü—ã
            if group_addr_clean == outage_street:
                return True, outage_addr
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü
            cleaned_outage_street = self._normalize_street_name(outage_street)
            cleaned_group_addr = self._normalize_street_name(group_addr_clean)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —É–ª–∏—Ü
            if cleaned_outage_street in cleaned_group_addr or cleaned_group_addr in cleaned_outage_street:
                # –ï—Å–ª–∏ –¥–ª—è —É–ª–∏—Ü—ã —É–∫–∞–∑–∞–Ω—ã –¥–æ–º–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–æ–º–æ–≤
                if outage_houses:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    house_match = re.search(r'(\d+[–∞-—è]?)$', group_addr_clean)
                    if house_match:
                        group_house = house_match.group(1)
                        if group_house in outage_houses:
                            return True, outage_addr
                    # –ï—Å–ª–∏ –¥–æ–º –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∞–¥—Ä–µ—Å–µ –≥—Ä—É–ø–ø—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —É–ª–∏—Ü–µ
                    elif not re.search(r'\d', group_addr_clean):
                        return True, outage_addr
                else:
                    # –ï—Å–ª–∏ –¥–æ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —É–ª–∏—Ü–µ
                    return True, outage_addr
        
            return False, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤: {e}")
            return False, None
    
    def _find_matched_address(self, group_addresses, outage_addresses):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–≤—à–∏–π –∞–¥—Ä–µ—Å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–æ–π –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            for outage_addr in outage_addresses:
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º –≥—Ä—É–ø–ø—ã
                for group_addr in group_addresses:
                    is_match, matched_address = self._address_match_utility(group_addr, outage_addr)
                    if is_match:
                        return matched_address
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å
            return outage_addresses[0] if outage_addresses else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–≤—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞: {e}")
            return outage_addresses[0] if outage_addresses else None

    
    
    def _filter_outages_by_group_addresses(self, outages, group):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å–∞–º –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø—ã
            group_addresses = json.loads(group.addresses) if group.addresses else []
            
            # –ï—Å–ª–∏ —É –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            if not group_addresses:
                logger.info(f"–ì—Ä—É–ø–ø–∞ {group.name} –Ω–µ –∏–º–µ–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
                return outages
            
            logger.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name} –ø–æ –∞–¥—Ä–µ—Å–∞–º: {group_addresses}")
            
            filtered_outages = []
            for outage in outages:
                # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                outage_addresses = []
                try:
                    outage_addresses = json.loads(outage.addresses) if outage.addresses else []
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {outage.id}: {e}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å–∞–º
                if self._addresses_match(group_addresses, outage_addresses):
                    filtered_outages.append(outage)
            
            logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_outages)} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name}")
            return filtered_outages
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group.name}: {e}")
            return outages  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    def _addresses_match(self, group_addresses, outage_addresses):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –∞–¥—Ä–µ—Å–æ–º –≥—Ä—É–ø–ø—ã
            for outage_addr in outage_addresses:
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                for group_addr in group_addresses:
                    is_match, _ = self._address_match_utility(group_addr, outage_addr)
                    if is_match:
                        return True
            
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: {e}")
            return False
    def _collect_outages_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö"""
        try:
            outages_data = parse_outages()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(outages_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            outages = db_manager.add_outages(outages_data)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(outages)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return outages_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: {e}")
            return None
    
    
    
    def _mark_outages_as_notified(self, outages_data):
        """–ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –Ω–æ—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"""
        if outages_data:
            unnotified_outages = db_manager.get_unnotified_outages()
            if unnotified_outages:
                outage_ids = [outage.id for outage in unnotified_outages]
                db_manager.mark_outages_as_notified(outage_ids)
                logger.info(f"–ü–æ–º–µ—á–µ–Ω–æ {len(outage_ids)} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –Ω–æ—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
    
    def _add_notification_to_history(self, event_type, event_id, group_id, message):
        """–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        db_manager.add_notification(
            event_type=event_type,
            event_id=event_id,
            group_id=group_id,
            message=message
        )
    
    def _get_task_groups(self, task):
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–¥–∞—á–∏"""
        task_groups = db_manager.get_task_groups(task['id'])
        
        # –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        if not task_groups:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task['name']} –Ω–µ –∏–º–µ–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
            groups = db_manager.get_all_groups()
        else:
            groups = task_groups
            logger.info(f"–ó–∞–¥–∞—á–∞ {task['name']} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {len(groups)} –≥—Ä—É–ø–ø")
        
        return groups
    
    def _get_task_types(self, task):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"""
        task_type_objects = []
        for type_id in task['task_types']:
            task_type_obj = db_manager.get_task_type_by_id(type_id)
            if task_type_obj:
                task_type_objects.append(task_type_obj)
        
        return task_type_objects
    
    def _update_task_last_run_time(self, task):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–∏ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
        with db_manager.task_manager.session_manager as session:
            try:
                from databases.models import ScheduledTask
                task_obj = session.query(ScheduledTask).filter(ScheduledTask.id == task['id']).first()
                if task_obj:
                    task_obj.last_run = datetime.utcnow()
                    session.commit()
                    logger.info(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ {task['name']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ {task['name']}: {e}")
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
                raise

    def _collect_task_outages(self, task_type_objects):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –¥–ª—è –∑–∞–¥–∞—á–∏"""
        outages_data = None
        for task_type_obj in task_type_objects:
            task_type_name = task_type_obj.name
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {task_type_name}")
            
            if task_type_name == 'outages_check':
                outages_data = self._collect_outages_data()
        
        return outages_data

    def _prepare_messages(self, groups, outages_data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        messages = []
        if outages_data:
            unnotified_outages = db_manager.get_unnotified_outages()
            if unnotified_outages:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unnotified_outages)} –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for group in groups:
                    group_outages = self._filter_outages_by_group_addresses(unnotified_outages, group)
                    if group_outages:
                        message = self._format_outages_message(group_outages, group)
                        messages.append({
                            'type': 'outage',
                            'content': message,
                            'group_id': group.group_id,
                            'outages': group_outages
                        })
            else:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return messages

    async def _send_notifications(self, groups, messages, outages_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if messages:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            sent_count = 0
            error_count = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
            grouped_messages = {}
            for msg in messages:
                group_id = msg['group_id']
                if group_id not in grouped_messages:
                    grouped_messages[group_id] = []
                grouped_messages[group_id].append(msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for group_id, group_messages in grouped_messages.items():
                try:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –≤ –æ–¥–Ω–æ
                    combined_message = ""
                    for msg in group_messages:
                        combined_message += msg['content'] + "\n\n"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(combined_message) > 4000:
                        combined_message = combined_message[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
                    
                    await self.bot.send_message(chat_id=group_id, text=combined_message, parse_mode="HTML")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_id}")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É)
                    self._add_notification_to_history(
                        event_type="outage",
                        event_id=1,
                        group_id=group_id,
                        message=combined_message
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
                    error_count += 1
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {error_count}")
            
            # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –Ω–æ—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
            self._mark_outages_as_notified(outages_data)
        else:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = Scheduler()