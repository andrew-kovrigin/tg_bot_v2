from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from databases.manager import db_manager
import json
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/outages - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º\n"
    )
    await message.answer(help_text)

async def cmd_outages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /outages"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        unnotified_outages = db_manager.get_unnotified_outages()
        
        if not unnotified_outages:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"‚ö†Ô∏è *–ù–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è* ({len(unnotified_outages)} —à—Ç.):\n\n"
        
        for outage in unnotified_outages[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –æ—Ç–∫–ª—é—á–µ–Ω–∏—è–º–∏
            # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞
            try:
                addresses = json.loads(outage.addresses) if outage.addresses else []
                addresses_text = ""
                if addresses:
                    addresses_parts = []
                    for addr in addresses:
                        street = addr.get('street', '')
                        houses = addr.get('houses', [])
                        if houses:
                            addresses_parts.append(f"{street} ({', '.join(houses)})")
                        else:
                            addresses_parts.append(street)
                    addresses_text = "; ".join(addresses_parts)
            except:
                addresses_text = outage.addresses or ""
            
            response += f"üè¢ *–†–∞–π–æ–Ω:* {outage.district}\n"
            response += f"üí° *–†–µ—Å—É—Ä—Å:* {outage.resource}\n"
            if outage.organization:
                response += f"üè¢ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* {outage.organization}\n"
            if outage.phone:
                response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {outage.phone}\n"
            if addresses_text:
                response += f"üìç *–ê–¥—Ä–µ—Å–∞:* {addresses_text}\n"
            if outage.reason:
                response += f"üìù *–ü—Ä–∏—á–∏–Ω–∞:* {outage.reason}\n"
            if outage.start_time and outage.end_time:
                response += f"‚è∞ *–í—Ä–µ–º—è:* {outage.start_time} - {outage.end_time}\n"
            response += "\n"
        
        if len(unnotified_outages) > 5:
            response += f"... –∏ –µ—â—ë {len(unnotified_outages) - 5} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π\n\n"
        
        await message.answer(response, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: {str(e)}")


async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        recent_outages = db_manager.get_recent_outages(100)
        
        if not recent_outages:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_outages = len(recent_outages)
        resources = {}
        districts = {}
        
        for outage in recent_outages:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
            resource = outage.resource or "–ù–µ —É–∫–∞–∑–∞–Ω"
            resources[resource] = resources.get(resource, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
            district = outage.district or "–ù–µ —É–∫–∞–∑–∞–Ω"
            districts[district] = districts.get(district, 0) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:*\n\n"
        response += f"üìà *–í—Å–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π:* {total_outages}\n\n"
        
        response += "üí° *–ü–æ —Ä–µ—Å—É—Ä—Å–∞–º:*\n"
        for resource, count in sorted(resources.items(), key=lambda x: x[1], reverse=True)[:5]:
            response += f"  {resource}: {count}\n"
        
        response += "\nüè¢ *–ü–æ —Ä–∞–π–æ–Ω–∞–º:*\n"
        for district, count in sorted(districts.items(), key=lambda x: x[1], reverse=True)[:5]:
            response += f"  {district}: {count}\n"
        
        await message.answer(response, parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

async def cmd_recent(message: types.Message):
   """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recent"""
   try:
       # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–æ—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
       recent_outages = db_manager.get_recent_outages(10)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
       
       if not recent_outages:
           await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.")
           return
       
       # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
       response = f"üïí *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è* ({len(recent_outages)} —à—Ç.):\n\n"
       
       for outage in recent_outages:
           # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞
           try:
               addresses = json.loads(outage.addresses) if outage.addresses else []
               addresses_text = ""
               if addresses:
                   addresses_parts = []
                   for addr in addresses:
                       street = addr.get('street', '')
                       houses = addr.get('houses', [])
                       if houses:
                           addresses_parts.append(f"{street} ({', '.join(houses)})")
                       else:
                           addresses_parts.append(street)
                   addresses_text = "; ".join(addresses_parts)
           except:
               addresses_text = outage.addresses or ""
           
           response += f"üè¢ *–†–∞–π–æ–Ω:* {outage.district}\n"
           response += f"üí° *–†–µ—Å—É—Ä—Å:* {outage.resource}\n"
           if outage.organization:
               response += f"üè¢ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* {outage.organization}\n"
           if outage.phone:
               response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {outage.phone}\n"
           if addresses_text:
               response += f"üìç *–ê–¥—Ä–µ—Å–∞:* {addresses_text}\n"
           if outage.reason:
               response += f"üìù *–ü—Ä–∏—á–∏–Ω–∞:* {outage.reason}\n"
           if outage.start_time and outage.end_time:
               response += f"‚è∞ *–í—Ä–µ–º—è:* {outage.start_time} - {outage.end_time}\n"
           response += "\n"
       
       await message.answer(response, parse_mode="Markdown")
   except Exception as e:
       await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π: {str(e)}")

async def on_bot_added_to_group(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        if message.new_chat_members:
            for member in message.new_chat_members:
                if member.id == (await message.bot.get_me()).id:
                    # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
                    chat_id = message.chat.id
                    chat_title = message.chat.title or f"–ì—Ä—É–ø–ø–∞ {chat_id}"
                    
                    logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat_title} (ID: {chat_id})")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                    await message.answer(
                        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.\n"
                        f"–ì—Ä—É–ø–ø–∞ '{chat_title}' (ID: {chat_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                        f"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
                    try:
                        from data.config import ADMIN_PANEL_URL
                        admin_url = ADMIN_PANEL_URL or "http://localhost:5000"
                        response = requests.post(
                            f"{admin_url}/api/add_group_from_telegram",
                            json={
                                "group_id": str(chat_id),
                                "name": chat_title,
                                "addresses": []
                            },
                            timeout=10
                        )
                        
                        if response.status_code == 200:
                            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {response.text}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω–∫—É: {e}")
                    
                    break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(cmd_start, CommandStart())
    dp.register_message_handler(cmd_help, CommandHelp())
    dp.register_message_handler(cmd_outages, commands=["outages"])
    dp.register_message_handler(cmd_stats, commands=["stats"])
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    dp.register_message_handler(on_bot_added_to_group, content_types=[types.ContentType.NEW_CHAT_MEMBERS])